import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/plant.dart';
import '../models/care_event.dart';
import '../models/user.dart';
import '../services/care_history_service.dart';
import '../utils/plant_icons.dart';
import '../api/api_service.dart';
import 'feeding_schedule_screen.dart';
import 'care_guide_screen.dart';
import 'plant_usage_screen.dart';
import 'care_plan_details_screen.dart';

class PlantDetailScreen extends StatefulWidget {
  final Plant plant;
  final List<CareEvent> careEvents;
  final User user;

  const PlantDetailScreen({
    super.key,
    required this.plant,
    required this.careEvents,
    required this.user,
  });

  @override
  State<PlantDetailScreen> createState() => _PlantDetailScreenState();
}

class _PlantDetailScreenState extends State<PlantDetailScreen> {
  List<String> _completedOperations = [];
  bool _historyLoaded = false;
  bool _loadingDescription = false;
  String? _plantDescription;
  Map<String, dynamic>? _varietyData;

  @override
  void initState() {
    super.initState();
    _loadCareHistory();
    _loadSavedVarietyData();
  }

  Future<void> _loadCareHistory() async {
    final completedOps = await CareHistoryService.getCompletedOperations();
    setState(() {
      _completedOperations = completedOps;
      _historyLoaded = true;
    });
  }

  Future<void> _loadPlantDescription() async {
    String? variety = widget.plant.variety;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —Å–æ—Ä—Ç
    if (variety == null || variety.isEmpty) {
      final result = await _showVarietyDialog();
      if (result == null) return;
      variety = result;
    }

    setState(() {
      _loadingDescription = true;
    });

    try {
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ä—Ç–∞
      final descriptionData = await ApiService.getOrCreateVarietyDescription(
        culture: widget.plant.name,
        variety: variety!, // variety –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
      );
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      print('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∞: $descriptionData');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ SharedPreferences
      await _saveVarietyData(descriptionData);
      
      setState(() {
        _varietyData = descriptionData; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        _loadingDescription = false;
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      setState(() {
        _loadingDescription = false;
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<String?> _showVarietyDialog() async {
    final TextEditingController varietyController = TextEditingController();
    
    final result = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ—Ä—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è.'),
            const SizedBox(height: 16),
            TextField(
              controller: varietyController,
              decoration: const InputDecoration(
                labelText: '–°–æ—Ä—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è',
                hintText: '–ù–∞–ø—Ä–∏–º–µ—Ä, –¢–∏—Ç–∞–Ω',
                border: OutlineInputBorder(),
              ),
              autofocus: true,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              if (varietyController.text.trim().isNotEmpty) {
                Navigator.pop(context, varietyController.text.trim());
              }
            },
            child: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å'),
          ),
        ],
      ),
    );

    return result;
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∞ –∏–∑ SharedPreferences
  Future<void> _loadSavedVarietyData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final plantId = widget.plant.id;
      final savedDataJson = prefs.getString('variety_data_$plantId');
      
      if (savedDataJson != null) {
        final savedData = json.decode(savedDataJson) as Map<String, dynamic>;
        setState(() {
          _varietyData = savedData;
        });
        print('üíæ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∞ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è $plantId');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–∞: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∞ –≤ SharedPreferences
  Future<void> _saveVarietyData(Map<String, dynamic> data) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final plantId = widget.plant.id;
      final dataJson = json.encode(data);
      await prefs.setString('variety_data_$plantId', dataJson);
      print('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è $plantId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–∞: $e');
    }
  }


  String? _formatDiseaseResistance(dynamic diseaseResistance) {
    if (diseaseResistance == null) return null;
    
    if (diseaseResistance is List && diseaseResistance.isNotEmpty) {
      return diseaseResistance.join(', ');
    }
    
    return diseaseResistance.toString();
  }

  Widget _buildVarietyInfoCard() {
    print('üéØ _buildVarietyInfoCard –≤—ã–∑–≤–∞–Ω, _varietyData = $_varietyData');
    if (_varietyData == null) {
      print('‚ùå _varietyData is null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SizedBox.shrink()');
      return const SizedBox.shrink();
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫—É–ª—å—Ç—É—Ä—ã –∏ —Å–æ—Ä—Ç–∞
        if (_varietyData!['culture'] != null || _varietyData!['variety'] != null) ...[
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: Colors.green[100],
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              '${_varietyData!['culture'] ?? ''} ${_varietyData!['variety'] ?? ''}'.trim(),
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.green,
              ),
            ),
          ),
          const SizedBox(height: 12),
        ],

        // –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if (_varietyData!['description'] != null && _varietyData!['description'] != '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ') ...[
          Text(
            _varietyData!['description'],
            style: const TextStyle(
              fontSize: 14,
              height: 1.4,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 16),
        ],

        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ—Ä—Ç–∞
        _buildInfoRow('–°—Ä–æ–∫ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è', _varietyData!['ripeningPeriod'], Icons.schedule),
        _buildInfoRow('–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è', _varietyData!['plantHeight'], Icons.height),
        _buildInfoRow('–ú–∞—Å—Å–∞ –ø–ª–æ–¥–∞', _varietyData!['fruitWeight'], Icons.scale),
        _buildInfoRow('–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', _varietyData!['yield'], Icons.eco),
        _buildInfoRow('–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º', _formatDiseaseResistance(_varietyData!['diseaseResistance']), Icons.shield),
        _buildInfoRow('–£—Å–ª–æ–≤–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è', _varietyData!['growingConditions'], Icons.agriculture),
      ],
    );
  }

  Widget _buildInfoRow(String label, dynamic value, IconData icon) {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print('üîç _buildInfoRow: $label = $value (${value.runtimeType})');
    
    if (value == null || value.toString().trim().isEmpty || 
        value.toString().contains('–ù–µ —É–∫–∞–∑–∞–Ω') || 
        value.toString().contains('–ù–µ —É–∫–∞–∑–∞–Ω–∞')) {
      print('‚ùå –ü–æ–ª–µ $label —Å–∫—Ä—ã—Ç–æ: –∑–Ω–∞—á–µ–Ω–∏–µ = $value');
      return const SizedBox.shrink();
    }

    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, size: 16, color: Colors.green),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '$label:',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  value.toString(),
                  style: const TextStyle(fontSize: 13, color: Colors.black87),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text(
          '–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeroSection(),
            const SizedBox(height: 20),
            _buildDescriptionSection(),
            const SizedBox(height: 24),
            _buildUsefulLinksSection(context),
            const SizedBox(height: 24),
            _buildCareHistory(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeroSection() {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Colors.green[50]!,
            Colors.green[100]!,
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.green[200]!),
        boxShadow: [
          BoxShadow(
            color: Colors.green.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
          Hero(
            tag: 'plant-${widget.plant.id}',
            child: Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(30),
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: PlantIcons.getStyledIcon(widget.plant.name, size: 50),
            ),
          ),
          const SizedBox(width: 16),
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.plant.name,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 4),
                if (widget.plant.variety != null)
                  Text(
                    widget.plant.variety!,
                    style: const TextStyle(
                      fontSize: 14,
                      color: Colors.grey,
                    ),
                  ),
                const SizedBox(height: 4),
                Text(
                  '–ü–æ—Å–∞–∂–µ–Ω–æ: ${widget.plant.plantingDate.day}.${widget.plant.plantingDate.month}.${widget.plant.plantingDate.year}',
                  style: const TextStyle(
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
                // const SizedBox(height: 4),
                // Container(
                //   padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                //   decoration: BoxDecoration(
                //     color: Colors.green[100],
                //     borderRadius: BorderRadius.circular(12),
                //   ),
                //   child: Text(
                //     '–°—Ç–∞–¥–∏—è: ${widget.plant.growthStage}',
                //     style: const TextStyle(
                //       fontSize: 12,
                //       color: Colors.green,
                //       fontWeight: FontWeight.w500,
                //     ),
                //   ),
                // ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNextCareEvent(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        if (widget.careEvents.isEmpty)
          _buildEmptyCareEvent()
        else
          ...widget.careEvents.map((event) => _buildCareEventCard(context, event)),
      ],
    );
  }

  Widget _buildEmptyCareEvent() {
    return Card(
      elevation: 0,
      color: const Color(0xFFF5F5F5),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: const Padding(
        padding: EdgeInsets.all(16.0),
        child: Text(
          '–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç',
          style: TextStyle(color: Colors.grey),
        ),
      ),
    );
  }

  Widget _buildCareEventCard(BuildContext context, CareEvent event) {
    return Card(
      elevation: 0,
      margin: const EdgeInsets.only(bottom: 12),
      color: const Color(0xFFE8F5E9),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${event.date.day}.${event.date.month}.${event.date.year} - ${event.title}',
              style: const TextStyle(
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              event.description,
              style: const TextStyle(
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 12),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => CareGuideScreen(event: event),
                        ),
                      );
                    },
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.green,
                      side: const BorderSide(color: Colors.green),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: const Text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {},
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: const Text('–û—Ç–º–µ—Ç–∏—Ç—å'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDescriptionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '–û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        Card(
          elevation: 0,
          color: const Color(0xFFF5F5F5),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (_varietyData != null) ...[
                  // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–∞
                  _buildVarietyInfoCard(),
                ] else ...[
                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
                  Text(
                    widget.plant.description,
                    style: const TextStyle(
                      fontSize: 14,
                      height: 1.4,
                    ),
                  ),
                ],
                const SizedBox(height: 12),
                ElevatedButton.icon(
                  onPressed: (_loadingDescription || _varietyData != null) ? null : _loadPlantDescription,
                  icon: _loadingDescription 
                    ? const SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
                      )
                    : const Icon(Icons.cloud_download, size: 16),
                  label: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildUsefulLinksSection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        // –ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥–∫–æ—Ä–º–æ–∫
        Card(
          elevation: 0,
          margin: const EdgeInsets.only(bottom: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: const BorderSide(color: Color(0xFFEEEEEE)),
          ),
          child: ListTile(
            leading: const Icon(Icons.calendar_today, color: Colors.green),
            title: const Text('–ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥–∫–æ—Ä–º–æ–∫'),
            subtitle: const Text('–ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞ (—Å–≤–æ–¥–Ω—ã–π)'),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => FeedingScheduleScreen(plant: widget.plant, user: widget.user),
                ),
              );
            },
          ),
        ),
        
        // –ü–ª–∞–Ω —É—Ö–æ–¥–∞ –ø–æ–¥—Ä–æ–±–Ω–æ
        Card(
          elevation: 0,
          margin: const EdgeInsets.only(bottom: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: const BorderSide(color: Color(0xFFEEEEEE)),
          ),
          child: ListTile(
            leading: const Icon(Icons.list_alt, color: Colors.green),
            title: const Text('–ü–ª–∞–Ω —É—Ö–æ–¥–∞ –ø–æ–¥—Ä–æ–±–Ω–æ'),
            subtitle: const Text('–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => CarePlanDetailsScreen(plant: widget.plant, user: widget.user),
                ),
              );
            },
          ),
        ),
        // –°–µ–º–µ–Ω–∞ –∏ —Å–∞–∂–µ–Ω—Ü—ã - –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Å –Ω–∞–¥–ø–∏—Å—å—é "–°–∫–æ—Ä–æ"
        Card(
          elevation: 0,
          margin: const EdgeInsets.only(bottom: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: const BorderSide(color: Color(0xFFEEEEEE)),
          ),
          child: ListTile(
            leading: const Icon(Icons.shopping_cart, color: Colors.grey),
            title: const Text('–°–µ–º–µ–Ω–∞ –∏ —Å–∞–∂–µ–Ω—Ü—ã'),
            subtitle: const Text('–°–∫–æ—Ä–æ'),
            trailing: const Text(
              '–°–∫–æ—Ä–æ',
              style: TextStyle(
                color: Colors.grey,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
            onTap: null, // –ù–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
          ),
        ),
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã
        Card(
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: const BorderSide(color: Color(0xFFEEEEEE)),
          ),
          child: ListTile(
            leading: const Icon(Icons.restaurant, color: Colors.green),
            title: const Text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã'),
            subtitle: const Text('–†–µ—Ü–µ–ø—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã'),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => PlantUsageScreen(plant: widget.plant),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildCareHistory() {
    if (!_historyLoaded) {
      return const Center(child: CircularProgressIndicator());
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
    final plantOperations = _completedOperations
        .where((operationId) => operationId.startsWith('${widget.plant.id}_'))
        .toList();

    if (plantOperations.isEmpty) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '–ò—Å—Ç–æ—Ä–∏—è —É—Ö–æ–¥–∞',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          const Center(
            child: Text(
              '–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
              style: TextStyle(
                color: Colors.grey,
                fontSize: 14,
              ),
            ),
          ),
        ],
      );
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '–ò—Å—Ç–æ—Ä–∏—è —É—Ö–æ–¥–∞',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        ...plantOperations.map((operationId) => _buildHistoryItem(operationId, context)),
      ],
    );
  }

  Widget _buildHistoryItem(String operationId, BuildContext context) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    final operationDetails = CareHistoryService.getOperationDetails(operationId);
    final now = DateTime.now();
    final dateStr = '${now.day}.${now.month}.${now.year}';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    String operationTitle = '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞';
    if (operationDetails != null) {
      final fase = operationDetails['fase']?.toString() ?? '';
      final type = operationDetails['type']?.toString() ?? '';
      if (fase.isNotEmpty) {
        operationTitle = fase;
      } else if (type.isNotEmpty) {
        operationTitle = type;
      }
    }
    
    return Card(
      elevation: 0,
      margin: const EdgeInsets.only(bottom: 8),
      color: const Color(0xFFF5F5F5),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8),
      ),
      child: InkWell(
        onTap: () {
          // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—è–º –æ–ø–µ—Ä–∞—Ü–∏–∏
          _navigateToOperationDetails(context, operationId, operationDetails);
        },
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                dateStr,
                style: const TextStyle(
                  fontSize: 12,
                  color: Colors.grey,
                ),
              ),
              Expanded(
                child: Text(
                  operationTitle,
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              Row(
                children: [
                  Text(
                    '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                    style: const TextStyle(
                      fontSize: 12,
                      color: Colors.green,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const SizedBox(width: 4),
                  const Icon(
                    Icons.arrow_forward_ios,
                    size: 12,
                    color: Colors.grey,
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _navigateToOperationDetails(BuildContext context, String operationId, Map<String, dynamic>? operationDetails) {
    if (operationDetails == null) return;
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => _OperationDetailsScreen(
          operationId: operationId,
          operationDetails: operationDetails,
          plant: widget.plant,
        ),
      ),
    );
  }
}

// –≠–∫—Ä–∞–Ω —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
class _OperationDetailsScreen extends StatelessWidget {
  final String operationId;
  final Map<String, dynamic> operationDetails;
  final Plant plant;

  const _OperationDetailsScreen({
    required this.operationId,
    required this.operationDetails,
    required this.plant,
  });

  @override
  Widget build(BuildContext context) {
    final String type = operationDetails['type']?.toString() ?? '';
    final String fase = operationDetails['fase']?.toString() ?? '';
    final String period = operationDetails['period']?.toString() ?? '';
    final String description = operationDetails['description']?.toString() ?? '';
    final List<dynamic> materials = operationDetails['materials'] as List<dynamic>? ?? [];

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text(
          '–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Text(
              '–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è ${plant.name}',
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 20),

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            Card(
              elevation: 0,
              color: const Color(0xFFF8F9FA),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
                side: const BorderSide(color: Color(0xFFEEEEEE)),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (fase.isNotEmpty) ...[
                      Text(
                        '–§–∞–∑–∞: $fase',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 8),
                    ],
                    if (type.isNotEmpty) ...[
                      Text(
                        '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: $type',
                        style: const TextStyle(
                          fontSize: 14,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 8),
                    ],
                    if (period.isNotEmpty) ...[
                      Text(
                        '–ü–µ—Ä–∏–æ–¥: $period',
                        style: const TextStyle(
                          fontSize: 14,
                          color: Colors.green,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 8),
                    ],
                    if (description.isNotEmpty) ...[
                      Text(
                        '–û–ø–∏—Å–∞–Ω–∏–µ:',
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        description,
                        style: const TextStyle(
                          fontSize: 14,
                          color: Colors.black87,
                          height: 1.4,
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ),

            // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
            if (materials.isNotEmpty) ...[
              const SizedBox(height: 16),
              const Text(
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              ...materials.map((material) => _buildMaterialCard(material as Map<String, dynamic>)),
            ],

            // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const SizedBox(height: 16),
            Card(
              elevation: 0,
              color: Colors.green.withOpacity(0.1),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
                side: const BorderSide(color: Colors.green),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    const Icon(
                      Icons.check_circle,
                      color: Colors.green,
                      size: 24,
                    ),
                    const SizedBox(width: 12),
                    const Expanded(
                      child: Text(
                        '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Colors.green,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMaterialCard(Map<String, dynamic> material) {
    final String name = (material['name'] ?? '').toString();
    final String type = (material['type'] ?? '').toString();
    final String norm = (material['norm'] ?? '').toString();
    final String method = (material['method'] ?? '').toString();
    final String frequency = (material['frequency'] ?? '').toString();
    final String warning = (material['warning'] ?? '').toString();
    final List<dynamic> alternatives = (material['alternatives'] as List<dynamic>? ?? []);

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 0,
      color: const Color(0xFFF8F9FA),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8),
        side: const BorderSide(color: Color(0xFFEEEEEE)),
      ),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: Text(
                    name,
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                  ),
                ),
                if (type.isNotEmpty)
                  Text(
                    type,
                    style: const TextStyle(
                      color: Colors.grey,
                      fontSize: 12,
                    ),
                  ),
              ],
            ),
            if (norm.isNotEmpty) ...[
              const SizedBox(height: 6),
              Text(
                '–ù–æ—Ä–º–∞: $norm',
                style: const TextStyle(
                  fontSize: 14,
                  color: Colors.black87,
                ),
              ),
            ],
            if (method.isNotEmpty) ...[
              const SizedBox(height: 6),
              Text(
                '–°–ø–æ—Å–æ–±: $method',
                style: const TextStyle(
                  fontSize: 14,
                  color: Colors.black87,
                ),
              ),
            ],
            if (frequency.isNotEmpty) ...[
              const SizedBox(height: 6),
              Text(
                '–ß–∞—Å—Ç–æ—Ç–∞: $frequency',
                style: const TextStyle(
                  fontSize: 14,
                  color: Colors.black87,
                ),
              ),
            ],
            if (warning.isNotEmpty) ...[
              const SizedBox(height: 6),
              Text(
                '–í–Ω–∏–º–∞–Ω–∏–µ: $warning',
                style: const TextStyle(
                  color: Colors.red,
                  fontSize: 14,
                ),
              ),
            ],
            if (alternatives.isNotEmpty) ...[
              const SizedBox(height: 8),
              const Text(
                '–ê–Ω–∞–ª–æ–≥–∏:',
                style: TextStyle(
                  fontWeight: FontWeight.w600,
                  fontSize: 14,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 4),
              ...alternatives.map((alt) {
                final altMap = alt as Map<String, dynamic>;
                final altName = (altMap['name'] ?? '').toString();
                final altComment = (altMap['comment'] ?? '').toString();
                final altNorm = (altMap['norm'] ?? '').toString();
                
                return Padding(
                  padding: const EdgeInsets.only(bottom: 4),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '- $altName: $altComment',
                        style: const TextStyle(
                          fontSize: 14,
                          color: Colors.black87,
                        ),
                      ),
                      if (altNorm.isNotEmpty) ...[
                        const SizedBox(height: 2),
                        Text(
                          '  –ù–æ—Ä–º–∞: $altNorm',
                          style: const TextStyle(
                            fontSize: 12,
                            color: Colors.grey,
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                      ],
                    ],
                  ),
                );
              }),
            ],
          ],
        ),
      ),
    );
  }
}