import '../api/api_service.dart';
import '../models/care_event.dart';
import '../models/plant.dart';
import '../models/user.dart';

class UpcomingEventsService {
  // –ü–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ø–ª–∞–Ω–∞ —É—Ö–æ–¥–∞
  static Future<List<CareEvent>> getUpcomingEvents(User user, List<Plant> plants) async {
    final List<CareEvent> upcomingEvents = [];
    
    print('üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è ${plants.length} —Ä–∞—Å—Ç–µ–Ω–∏–π');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —É—Ö–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
      for (final plant in plants) {
        print('üå± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ: ${plant.name} (${plant.culture ?? plant.name})');
        
        final carePlan = await ApiService.getCarePlanByParams(
          culture: plant.culture ?? plant.name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º culture –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ name
          region: user.region,
          gardenType: user.gardenType,
        );
        
        if (carePlan != null && carePlan['operations'] != null) {
          final operations = carePlan['operations'] as List<dynamic>;
          print('üìã –ù–∞–π–¥–µ–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è ${plant.name}');
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
          for (final operation in operations) {
            final operationMap = operation as Map<String, dynamic>;
            final type = (operationMap['type'] ?? '').toString();
            final fase = (operationMap['fase'] ?? '').toString();
            final period = (operationMap['period'] ?? '').toString();
            final description = (operationMap['description'] ?? '').toString();
            
            print('üîç –û–ø–µ—Ä–∞—Ü–∏—è: $type - $fase - $period');
            
            // –ü–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
            final eventMonth = _parseMonthFromPeriod(period);
            if (eventMonth != null && _isEventInCurrentOrNextMonth(eventMonth)) {
              print('‚úÖ –°–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–º/—Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ: $eventMonth');
              
              // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –º–µ—Å—è—Ü–∞
              final event = CareEvent(
                id: '${plant.id}_${type}_${fase}',
                plantId: plant.id,
                title: fase.isNotEmpty ? fase : type,
                description: description,
                date: DateTime(DateTime.now().year, eventMonth, 1), // –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
                options: _createCareOptions(operationMap),
              );
              
              upcomingEvents.add(event);
            } else {
              print('‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –≤ —Ç–µ–∫—É—â–µ–º/—Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ: $eventMonth');
            }
          }
        } else {
          print('‚ùå –ü–ª–∞–Ω —É—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${plant.name}');
        }
      }
      
      print('üìÖ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${upcomingEvents.length} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π');
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      upcomingEvents.sort((a, b) => a.date.compareTo(b.date));
      return upcomingEvents;
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: $e');
      return [];
    }
  }
  
  // –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü –∏–∑ –ø–µ—Ä–∏–æ–¥–∞
  static int? _parseMonthFromPeriod(String period) {
    if (period.isEmpty) return null;
    
    try {
      final periodLower = period.toLowerCase();
      
      // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
      if (periodLower.contains('—è–Ω–≤–∞—Ä') || periodLower.contains('—è–Ω–≤')) {
        return 1;
      } else if (periodLower.contains('—Ñ–µ–≤—Ä–∞–ª') || periodLower.contains('—Ñ–µ–≤')) {
        return 2;
      } else if (periodLower.contains('–º–∞—Ä—Ç') || periodLower.contains('–º–∞—Ä')) {
        return 3;
      } else if (periodLower.contains('–∞–ø—Ä–µ–ª') || periodLower.contains('–∞–ø—Ä')) {
        return 4;
      } else if (periodLower.contains('–º–∞–π') || periodLower.contains('–º–∞—è')) {
        return 5;
      } else if (periodLower.contains('–∏—é–Ω') || periodLower.contains('–∏—é–Ω—è')) {
        return 6;
      } else if (periodLower.contains('–∏—é–ª') || periodLower.contains('–∏—é–ª—è')) {
        return 7;
      } else if (periodLower.contains('–∞–≤–≥—É—Å—Ç') || periodLower.contains('–∞–≤–≥')) {
        return 8;
      } else if (periodLower.contains('—Å–µ–Ω—Ç—è–±—Ä') || periodLower.contains('—Å–µ–Ω') || periodLower.contains('—Å–µ–Ω—Ç')) {
        return 9;
      } else if (periodLower.contains('–æ–∫—Ç—è–±—Ä') || periodLower.contains('–æ–∫—Ç')) {
        return 10;
      } else if (periodLower.contains('–Ω–æ—è–±—Ä') || periodLower.contains('–Ω–æ—è')) {
        return 11;
      } else if (periodLower.contains('–¥–µ–∫–∞–±—Ä') || periodLower.contains('–¥–µ–∫')) {
        return 12;
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –º–µ—Å—è—Ü, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null;
      
    } catch (e) {
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ
  static bool _isEventInCurrentOrNextMonth(int eventMonth) {
    final now = DateTime.now();
    final currentMonth = now.month;
    final nextMonth = (currentMonth % 12) + 1;
    
    // –°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ
    return eventMonth == currentMonth || eventMonth == nextMonth;
  }
  
  // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ —É—Ö–æ–¥–∞ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏
  static List<CareOption> _createCareOptions(Map<String, dynamic> operation) {
    final List<CareOption> options = [];
    final materials = operation['materials'] as List<dynamic>? ?? [];
    
    if (materials.isNotEmpty) {
      final products = <String>[];
      final alternatives = <String>[];
      
      for (final material in materials) {
        final materialMap = material as Map<String, dynamic>;
        final name = (materialMap['name'] ?? '').toString();
        final alts = materialMap['alternatives'] as List<dynamic>? ?? [];
        
        if (name.isNotEmpty) {
          products.add(name);
        }
        
        for (final alt in alts) {
          final altMap = alt as Map<String, dynamic>;
          final altName = (altMap['name'] ?? '').toString();
          if (altName.isNotEmpty) {
            alternatives.add(altName);
          }
        }
      }
      
      if (products.isNotEmpty || alternatives.isNotEmpty) {
        options.add(CareOption(
          type: (operation['type'] ?? '').toString(),
          title: (operation['fase'] ?? operation['type'] ?? '').toString(),
          instructions: (operation['description'] ?? '').toString(),
          products: products,
          alternatives: alternatives,
        ));
      }
    }
    
    return options;
  }
}
